
@{
    ViewBag.Title = "Report";

    var horas = new[] {
       "6_30AM", "7_30AM", "8_30AM", "9_30AM", "10_30AM", "11_30AM", "12_30PM",
        "1_30PM", "2_30PM", "3_30PM", "4_30PM", "5_30PM", "6_30PM","7_30PM","8_30PM",
        "9_30PM","10_30PM","11_30PM","12_30AM","1_30AM","2_30AM","3_30AM","4_30AM","5_30AM"
    };

    var displayHoras = new[] {
       "6:30 AM", "7:30 AM", "8:30 AM", "9:30 AM", "10:30 AM", "11:30 AM", "12:30 PM",
        "1:30 PM", "2:30 PM", "3:30 PM", "4:30 PM", "5:30 PM", "6:30 PM","7:30 PM","8:30 PM",
        "9:30 PM","10:30 PM","11:30 PM","12:30 AM","1:30 AM","2:30 AM","3:30 AM","4:30 AM","5:30 AM"
    };

    var resultados = ViewBag.ResultadosRevision as Dictionary<string, Dictionary<int, string>>;
}

<style>
    .celda-revisada-NG {
        background-color: #F6C2C2;
        border: 2px solid #28a745;
    }

    .celda-revisada {
        background-color: #C2F6C7;
        border: 2px solid #28a745;
    }

    .celda-no-revisada {
        background-color: #D8D2D2;
        border: 2px solid #dc3545;
    }


    .tstle {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    #clock {
        font-size: 20px;
        color: #555;
        margin-top: 5px;
    }
</style>

<link href="~/Stylees/PageCommonStylee.css" rel="stylesheet" />

<style>
    #panelRevision {
        display: none;
        position: fixed;
        top: 30%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #fff;
        border: 2px solid #333;
        padding: 20px 30px;
        z-index: 9999;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.5);
        text-align: center;
        min-width: 280px;
    }

        #panelRevision p#labelBloque {
            margin-bottom: 20px;
            font-weight: bold;
            font-size: 1.1em;
        }

        #panelRevision div {
            margin: 20px 0;
        }

        #panelRevision label {
            display: block;
            margin-bottom: 10px;
            font-size: 1em;
            cursor: pointer;
        }

        #panelRevision button {
            width: 110px;
            margin: 0 10px;
            font-size: 1em;
            padding: 7px 10px;
            cursor: pointer;
        }
</style>

<!-- Panel emergente personalizado -->
<div id="panelRevision" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%);
    background:#fff; border:2px solid #333; padding:20px; z-index:9999; border-radius:10px; box-shadow:0 0 15px rgba(0,0,0,0.5); text-align:center;">
    <h4 style="margin-bottom:15px;color:#c26d05">Revisión del bloque actual</h4>
    <p id="labelBloque"></p>
    <p><strong>Número de revisión:</strong> <span id="numeroRevisionText"></span></p>
    <div>

        <p><input type="checkbox" name="panelSelect" value="OK"> OK</p>
        <img src="~/Pictures/FFcOK.jpg" style="width:200px" />
        <hr>
        <p><input type="checkbox" name="panelSelect" value="NG"> NG</p>
        <img src="~/Pictures/FFcNG.jpg" style="width:200px" />
        <hr>
        <p style="font-weight:700; color:#067d6e"> Enter your employee number </p>
        <input type="text" style="background-color: #D8D2D2; font-weight: 700;" id="Credentials" name="Credentials" required />
        <hr>

    </div>
    <button id="btnConfirmarRevision" class="btn btn-success">Confirmar</button>
    <button id="btnCancelarRevision" class="btn btn-secondary">Cancelar</button>
</div>

<script>
    const checkboxes = document.querySelectorAll('input[name="panelSelect"]');

    checkboxes.forEach(chk => {
        chk.addEventListener('change', function () {
            if (this.checked) {
                // Desmarcar los demás
                checkboxes.forEach(other => {
                    if (other !== this) other.checked = false;
                });
            }
        });
    });
</script>

<div style="text-align:center">
    <h2 class="ttle">FFC Cable Inspection and Control</h2>
</div>
<hr />
<input value="Administrator" id="Rol" name="Rol" readonly="@true" hidden="hidden" />

<h4 class="Tittlelabel" style="text-align:center">Review of Report | @ViewBag.id</h4>

<p style="text-align: center; font-family: Trebuchet MS, sans-serif; font-size:15px">
    Indicate the current status of the FFC cable | Time Assignment
</p>
<br />

<h4 class="Tittlelabel" style="text-align:center">Status Now: </h4>
<p style="text-align: center; font-family: Trebuchet MS, sans-serif; font-size:15px" id="status" name="status"> @ViewBag.status </p>
<input value="@ViewBag.status" name="Status" id="CurrentStatus" hidden="hidden" />
<input value="@ViewBag.Finish" name="FinishTime" id="FinishTime" hidden="hidden" />

<br />
<div style="text-align:center">
    <h4 class="Tittlelabel" style="margin-top: 5px;text-align:center; font-weight: bold; color: white; padding: 4px 8px; border-radius: 4px; display: inline-block; background-color: #831518; ">
        Report Closed
    </h4>
</div>

<p style="text-align: center; font-family: Trebuchet MS, sans-serif; font-size:15px"> @ViewBag.Finish </p>
@*<br />
    <div style="text-align:center;">
        <button id="exportPDF" class="btn btn-danger mb-3" style="width: 35vh">
            <i data-lucide="download"></i> Complete Report
        </button>
    </div>*@

<hr />

<h2 class="tstle">
    | Real-time clock |
    <div id="clock"></div>
</h2>

<hr />

@*<h4 class="Tittlelabel" style="text-align:center">Internal Model: </h4>
    <p style="text-align: center; font-family: Trebuchet MS, sans-serif; font-size:15px">
        @ViewBag.ModeloInterno
    </p>

    <h4 class="Tittlelabel" style="text-align:center">Estacion de Linea: </h4>
    <p style="text-align: center; font-family: Trebuchet MS, sans-serif; font-size:15px">
        @ViewBag.stations
    </p>*@

<br />
@*<div style="text-align:center">
        <button id="btnNotificaciones">🔔 Activar notificaciones</button>
    </div>
    <br />*@

<h4 class="Tittlelabel" style="text-align:center"> ◽| Hourly Interval Review |◽ </h4>

@*Sección de Modelo interno, PCBA y Operador FCT
    <div Style="margin-top:20px; padding:10px; border:1px solid #000; border-radius:8px; background-color:#f9f9f9;">
        <div style="display:flex; justify-content: space-around; margin-bottom:15px;">
            <div style="width: 50%; text-align: center;">
                <p style="font-weight:bold;">Modelo Interno:</p>
                <p>@ViewBag.ModeloInterno</p>
            </div>
            <div style="width:50%; text-align:center;">
                <p style="font-weight:bold;">PCBA:</p>
                <p>@ViewBag.PCBA</p>
            </div>
        </div>
    </div>*@

<style>

    .tabla-revision {
        width: 80%;
        margin: 20px auto;
        border-collapse: collapse;
        font-family: Arial, sans-serif;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

        .tabla-revision thead {
            background-color: #f0f0f0;
        }

        .tabla-revision th, .tabla-revision td {
            border: 1px solid #ccc;
            padding: 10px 15px;
            text-align: center;
            vertical-align: middle;
        }

        .tabla-revision th {
            font-weight: bold;
            font-size: 16px;
        }

        .tabla-revision input[type="radio"] {
            margin: 0 5px;
            transform: scale(1.2);
        }

        /* Opcional: Zebra stripes */
        .tabla-revision tbody tr:nth-child(even) {
            background-color: #fafafa;
        }
</style>

<form id="formRevision" method="post" action="@Url.Action("GuardarRevisiones", "Home")">
    <input type="hidden" name="Select" id="selectValue" />
    <input type="hidden" name="Hora" id="horaSeleccionada" />
    <input type="hidden" name="Numero" id="numeroSeleccionado" />
    <input type="hidden" name="OperadorFCT" value="@ViewBag.OperadorFCT" />
    <input type="hidden" name="folio" value="@ViewBag.id" />
    <input type="hidden" name="ModeloInterno" value="@ViewBag.ModeloInterno" />

    @*<pre>

           @foreach (var hora in resultados.Keys)
            {
                <text>@hora:</text>
                foreach (var paso in resultados[hora])
                {
                    <text> Paso @paso.Key = @paso.Value</text><br />
                }
            }

        </pre>*@

    <table class="tabla-revision">
        <thead>
            <tr>
                <th>HORA</th>
                <th>| 1 |</th>
                <th>| 2 |</th>
                <th>| 3 |</th>
            </tr>
        </thead>
        <tbody>

            @for (int i = 0; i < horas.Length; i++)
            {
                var h = horas[i]; // clave para checkbox
                var label = displayHoras[i]; // ej: "6:30 AM"

                <tr data-time-label="@label">
                    <td>@label</td>

                    @for (int paso = 1; paso <= 3; paso++)
                    {
                        string nombreCampo = paso == 1 ? $"Checkbox{h}_Modelo" :
                                             paso == 2 ? $"Checkbox{h}_PCBA" :
                                                         $"Checkbox{h}_Operador";

                        string clase = $"check-{h}-{paso}";
                        string valor = "";

                        if (resultados != null && resultados.ContainsKey(label) && resultados[label].ContainsKey(paso))
                        {
                            valor = (resultados[label][paso] ?? "").Trim().ToUpper(); // 👈 limpia y normaliza
                        }

                        string claseCelda = "";
                        if (valor == "OK")
                        {
                            claseCelda = "celda-revisada";
                        }
                        else if (valor == "NG")
                        {
                            claseCelda = "celda-revisada-NG";
                        }
                        else if (valor == "-" || string.IsNullOrEmpty(valor))
                        {
                            claseCelda = "celda-no-revisada";
                        }

                        <td class="@claseCelda">
                            <input type="radio" name="@nombreCampo" value="OK" class="check @clase" @(valor == "OK" ? "checked" : "") />
                            OK
                            <input type="radio" name="@nombreCampo" value="NG" class="check @clase" @(valor == "NG" ? "checked" : "") />
                            NG
                        </td>
                    }
                </tr>
            }

        </tbody>
    </table>

</form>

<div id="notificacion-reporte" data-folio="@ViewBag.id" data-linea="@ViewBag.lines" data-status="@ViewBag.Finish"></div>

<!-- Sección de Operador FCT -->
<div style="margin-top:20px; padding:10px; border:1px solid #000; border-radius:8px; background-color:#f9f9f9;">
    <p style="font-weight:bold;">Operador FCT:</p>
    <p>@ViewBag.OperadorFCT</p>
</div>

<script>
    // Bloques horarios definidos
    const bloques = [
        { id: "6_30AM", hour: 6, minute: 30 },
        { id: "7_30AM", hour: 7, minute: 30 },
        { id: "8_30AM", hour: 8, minute: 30 },
        { id: "9_30AM", hour: 9, minute: 30 },
        { id: "10_30AM", hour: 10, minute: 30 },
        { id: "11_30AM", hour: 11, minute: 30 },
        { id: "12_30PM", hour: 12, minute: 30 },
        { id: "1_30PM", hour: 13, minute: 30 },
        { id: "2_30PM", hour: 14, minute: 30 },
        { id: "3_30PM", hour: 15, minute: 30 },
        { id: "4_30PM", hour: 16, minute: 30 },
        { id: "5_30PM", hour: 17, minute: 30 },
        { id: "6_30PM", hour: 18, minute: 30 },
        { id: "7_30PM", hour: 19, minute: 30 },
        { id: "8_30PM", hour: 20, minute: 30 },
        { id: "9_30PM", hour: 21, minute: 30 },
        { id: "10_30PM", hour: 22, minute: 30 },
        { id: "11_30PM", hour: 23, minute: 30 },
        { id: "12_30AM", hour: 0, minute: 30 },
        { id: "1_30AM", hour: 1, minute: 30 },
        { id: "2_30AM", hour: 2, minute: 30 },
        { id: "3_30AM", hour: 3, minute: 30 },
        { id: "4_30AM", hour: 4, minute: 30 },
        { id: "5_30AM", hour: 5, minute: 30 }
    ];

    let ultimoPasoActivo = null;
    let finalizado = false;

    // Función para mostrar el panel de revisión solo si no fue revisado
    function mostrarPanelRevision(bloqueId) {
        const panel = document.getElementById('panelRevision');
        const label = document.getElementById('labelBloque');
        if (!panel || !label) return;

        const paso = calcularPasoActual();
        if (paso === "0") return; // Paso inválido, no mostrar

        const nombreCampo = `Checkbox${bloqueId}_${paso === "1" ? 'Modelo' : paso === "2" ? 'PCBA' : 'Operador'}`;
        const radios = document.querySelectorAll(`input[name="${nombreCampo}"]`);
        const revisado = Array.from(radios).some(r => r.checked);

        if (revisado) {
            console.log(`Ya se revisó el paso ${paso} para el bloque ${bloqueId}`);
            return; // Ya revisado, no mostrar panel
        }

        label.innerText = `Bloque actual: ${bloqueId.replace(/_/g, ' ')}`;
        panel.setAttribute('data-bloque', bloqueId);
        panel.setAttribute('data-numero', paso);
        document.getElementById('numeroRevisionText').innerText = paso;
        panel.style.display = 'block';
    }

    // Calcula paso actual según minuto actual
    function calcularPasoActual() {
        const minutos = new Date().getMinutes();
        // Definir rangos claros para cada paso: 30-49 = 1, 50-59+0-9 = 2, 10-29 = 3
        if (minutos >= 30 && minutos <= 49) return "1";
        if ((minutos >= 50 && minutos <= 59) || (minutos >= 0 && minutos <= 9)) return "2";
        if (minutos >= 10 && minutos <= 29) return "3";
        return "0"; // Fuera de rango esperado
    }

    // Oculta panel y limpia selección
    function ocultarPanelRevision() {
        const panel = document.getElementById('panelRevision');
        if (!panel) return;
        panel.style.display = 'none';
        document.querySelectorAll('input[name="panelSelect"]').forEach(r => r.checked = false);
    }

    // Actualiza reloj visible y verifica si bloque finalizó para bloquear inputs
    function updateClock() {
        const now = new Date();
        // Formato HH:MM:SS
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const seconds = now.getSeconds().toString().padStart(2, '0');
        const timeString = `${hours}:${minutes}:${seconds}`;

        document.getElementById('clock').textContent = timeString;
    }

    // Deshabilita radios y marca estado COMPLETE cuando corresponde
    function verificarFinalizacion() {
        if (finalizado) return;

        const finishStr = document.getElementById("FinishTime")?.value;
        const statusText = document.getElementById("status");
        const statusHidden = document.getElementById("CurrentStatus");

        if (!finishStr || !statusText || !statusHidden) return;

        const finishDate = new Date(finishStr.replace(" ", "T"));
        const now = new Date();
        const estadoActual = statusHidden.value.trim().toUpperCase();

        const esMismoDia = (
            finishDate.getFullYear() === now.getFullYear() &&
            finishDate.getMonth() === now.getMonth() &&
            finishDate.getDate() === now.getDate()
        );

        if ((esMismoDia && now >= finishDate) || estadoActual === "COMPLETE") {
            if (estadoActual !== "COMPLETE") {
                statusText.textContent = "COMPLETE";
                statusHidden.value = "COMPLETE";
            }
            finalizado = true;

            const table = document.querySelector(".tabla-revision");
            if (table) {
                const inputs = table.querySelectorAll("input[type='radio']");
                inputs.forEach(input => input.disabled = true);
                table.style.opacity = "0.6";
                table.style.pointerEvents = "none";
            }
        }
    }

    // Controla la activación de radios según bloque y paso actual
    function controlarRadios() {
        console.log("Ejecutando controlarRadios...");

        if (typeof finalizado !== 'undefined' && finalizado) return;

        const now = new Date();
        const currentTotalMinutes = now.getHours() * 60 + now.getMinutes();

        let bloqueActual = null;

        // Buscar bloque actual basado en tiempo
        for (let i = 0; i < bloques.length - 1; i++) {
            const start = bloques[i].hour * 60 + bloques[i].minute;
            const end = bloques[i + 1].hour * 60 + bloques[i + 1].minute;
            if (currentTotalMinutes >= start && currentTotalMinutes < end) {
                bloqueActual = bloques[i];
                break;
            }
        }
        // Si es después del último bloque, asignar último bloque
        if (!bloqueActual && currentTotalMinutes >= (bloques[bloques.length - 1].hour * 60 + bloques[bloques.length - 1].minute)) {
            bloqueActual = bloques[bloques.length - 1];
        }

        // Desactivar todos radios con clase check
        document.querySelectorAll("input[type=radio].check").forEach(r => r.disabled = true);

        if (!bloqueActual) return;

        const bloqueStart = bloqueActual.hour * 60 + bloqueActual.minute;
        const minutosDentro = currentTotalMinutes - bloqueStart;

        // Determinar paso/columna
        let col = 1;
        if (minutosDentro >= 20 && minutosDentro < 40) col = 2;
        else if (minutosDentro >= 40) col = 3;

        // Activar radios correspondientes
        const clase = `.check-${bloqueActual.id}-${col}`;
        const radios = document.querySelectorAll(clase);
        radios.forEach(radio => radio.disabled = false);

        // Mostrar mensaje y panel solo si cambió el paso o bloque y no están chequeados los radios activados
        const nuevoPaso = `${bloqueActual.id}-${col}`;
        if (ultimoPasoActivo !== nuevoPaso) {
            ultimoPasoActivo = nuevoPaso;
            const yaChecado = Array.from(radios).some(radio => radio.checked);
            if (!yaChecado) {
                alert(`✅ Finalizó el paso anterior. Inicia paso ${col} del bloque: ${bloqueActual.id.replace(/_/g, ' ')}`);
                mostrarPanelRevision(bloqueActual.id);

                // Recarga la página después de 5 segundos para refrescar estado
                setTimeout(() => location.reload(), 30000);
            }
        }
    }

    // Configuración al cargar la página
    document.addEventListener("DOMContentLoaded", function () {
        // Solicitar permiso para notificaciones si es necesario
        if ("Notification" in window && Notification.permission !== "granted") {
            Notification.requestPermission();
        }

        // Desactivar radios si status es COMPLETE
        const status = document.getElementById("CurrentStatus")?.value;
        if (status === "COMPLETE") {
            const table = document.querySelector(".tabla-revision");
            if (table) {
                const inputs = table.querySelectorAll("input[type='radio']");
                inputs.forEach(input => input.disabled = true);
                table.style.opacity = "0.6";
                table.style.pointerEvents = "none";
            }
        }

        // Configurar evento para radios activados
        document.querySelectorAll('input[type="radio"]').forEach(radio => {
            radio.addEventListener('change', function () {
                if (!this.disabled) {
                    const fila = this.closest('tr');
                    const bloqueId = fila?.getAttribute("data-time-label");
                    if (bloqueId) {
                        mostrarPanelRevision(bloqueId); // ✅ usa el bloqueId directo
                    }
                }
            });
        });

        // Actualizar reloj cada segundo
        setInterval(updateClock, 1000);

        // Mostrar el reloj inmediatamente al cargar la página
        updateClock();

        // Ejecutar inmediatamente al cargar la página
        window.addEventListener('load', controlarRadios);

        // Ejecutar la función cada 30 segundos (30000 ms)
        setInterval(controlarRadios, 30000);
    });

     const urlGuardarRevision = '@Url.Action("GuardarRevisiones", "Home")';

    // Eventos para botones del panel
    document.getElementById("btnCancelarRevision")?.addEventListener("click", ocultarPanelRevision);

    document.getElementById("btnConfirmarRevision")?.addEventListener("click", function () {
        const seleccion = document.querySelector('input[name="panelSelect"]:checked');
        if (!seleccion) {
            alert("Por favor selecciona una opción.");
            return;
        }

        const valor = seleccion.value;
        const panel = document.getElementById("panelRevision");
        const bloque = panel.getAttribute("data-bloque");
        const numero = panel.getAttribute("data-numero");
        const horaTexto = bloque.replace(/_/g, ":").replace("AM", " AM").replace("PM", " PM");
        const Usuario = document.getElementById("Credentials");

        const data = {
            Select: valor,
            Hora: horaTexto,
            Numero: numero,
            folio: document.querySelector('[name="folio"]').value,
            OperadorFCT: document.querySelector('[name="OperadorFCT"]').value,
            Usuario: Usuario.value
        };

        fetch(urlGuardarRevision, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                } else {
                    alert("Revisión guardada.");
                    ocultarPanelRevision();
                }
            })
            .catch(err => {
                alert("Error al guardar la revisión.");
                console.error(err);
            });
    });
</script>



